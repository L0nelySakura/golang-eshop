services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - golang-network

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT}
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:${KAFKA_PORT}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG4J_LOGGERS=org.apache.kafka.controller=WARN,state.change.logger=WARN,kafka.server=WARN,kafka.log=WARN,kafka.cluster=WARN,org.apache.zookeeper=ERROR
      - KAFKA_LOG4J_ROOT_LOGLEVEL=WARN
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - golang-network

  db:
    image: postgres:15-alpine
    container_name: postgres
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - golang-network

  app:
    build: .
    container_name: app
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    restart: on-failure
    networks:
      - golang-network

networks:
  golang-network:
    driver: bridge

volumes:
  postgres_data:
